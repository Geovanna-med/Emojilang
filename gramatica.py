import re

stack = []

def P(string):
	string = re.sub(r'\s', "", string)
	stack.append("#")
	Q(string)


def Q(string):
	# e / <>... <= ... >= ... < ... > / BOOLEAN
	if stack[-1] in ('<>', '<=', '>=', '<', '>'):
		del(stack[-1])
		stack.append("BOOLEAN")
		Q(string)

	# e / 1..2..3.. / NUMBER
	elif stack[-1] in ('1Ô∏è‚É£','2Ô∏è‚É£','3Ô∏è‚É£','4Ô∏è‚É£') or stack[-1].isdigit():
		del(stack[-1])
		stack.append("NUMBER")
		Q(string)

	# e / "'hola mundus!'" / STRING
	elif stack[-1] == "'holamundus!'":
		del(stack[-1])
		stack.append("STRING")
		Q(string)

	# e / )NUMBER BOOLEAN NUMBER( / CONDITION
	elif "".join(stack[-1:-6:-1]) == ")NUMBERBOOLEANNUMBER(":
		del(stack[-5:])
		stack.append("CONDITION")
		Q(string)

	# e / STRINGüñ® / BODY
	elif "".join(stack[-1:-3:-1]) == "STRINGüñ®":
		del(stack[-2:])
		stack.append("BODY")
		Q(string)

	# e / IF_STAT / BODY
	elif "".join(stack[-1]) == "IF_STAT":
		del (stack[-1])
		stack.append("BODY")
		Q(string)

	# e / !BODYüëâCONDITION‚ùì / IF_STAT
	elif "".join(stack[-1:-6:-1]) == "‚ùóBODY‚û°CONDITION‚ùì":
		del(stack[-5:])
		stack.append("IF_STAT")
		Q(string)

	# e / ‚èπ IF_STAT ‚ñ∂ / PROGRAM
	elif "".join(stack[-1:-4:-1]) == "‚èπIF_STAT‚ñ∂":
		del(stack[-3:])
		stack.append("PROGRAM")
		Q(string)

	# e / ‚èπBODY‚ñ∂ / PROGRAM
	elif "".join(stack[-1:-4:-1]) == "‚èπBODY‚ñ∂":
		del(stack[-3:])
		stack.append("PROGRAM")
		Q(string)

	# e / PROGRAM / e
	elif stack[-1] == "PROGRAM":
		del(stack[-1])
		Q(string)

	# ‚èπ / e / ‚èπ
	elif string != "" and string[0] == "‚èπ":
		stack.append(string[0])
		string = string.lstrip("‚èπ")
		Q(string)

	# ‚ñ∂ / e / ‚ñ∂
	elif string != "" and string[0] == "‚ñ∂":
		stack.append(string[0])
		string = string[1:]
		Q(string)

	# ) / e / )
	elif string != "" and string[0] == ")":
		stack.append(string[0])
		string = string[1:]
		Q(string)
	
	# ( / e / (
	elif string != "" and string[0] == "(":
		stack.append(string[0])
		string = string[1:]
		Q(string)

	# ‚ùì / e / ‚ùì
	elif string != "" and string[0] == "‚ùì":
		stack.append(string[0])
		string = string[1:]
		Q(string)
		
	# üëâ / e / üëâ
	elif string != "" and string[0] == "‚û°":
		stack.append(string[0])
		string = string[1:]
		Q(string)

	# ‚ùó / e / ‚ùó
	elif string != "" and string[0] == "‚ùó":
		stack.append(string[0])
		string = string[1:]
		Q(string)

	# üñ®Ô∏è / e / üñ®Ô∏è
	elif string != "" and string[0] == "üñ®":
		stack.append(string[0])
		string = string[1:]
		Q(string)
	
	# '<>', '<=', '>=', '<', '>' / e / '<>', '<=', '>=', '<', '>'
	elif len(string) > 2 and string[0:2] in ('<>', '<=', '>=', '=='):
		#hicimos una peque√±a trampa aqu√≠ jeje :P
		stack.append('<')
		string = string[2:]
		Q(string)

	elif string != "" and string[0] in ('<', '>'):
		stack.append(string[0])
		string = string[1:]
		Q(string)
	
	# ('1Ô∏è‚É£','2Ô∏è‚É£','3Ô∏è‚É£','4Ô∏è‚É£') / e / ('1Ô∏è‚É£','2Ô∏è‚É£','3Ô∏è‚É£','4Ô∏è‚É£')
	elif string != "" and (string[0] in ('1Ô∏è‚É£','2Ô∏è‚É£','3Ô∏è‚É£','4Ô∏è‚É£') or string[0].isdigit()):
		stack.append(string[0])
		string = string[1:]
		Q(string)

	# 'holamundus!' / e / 'holamundus!'
	elif string.startswith("'holamundus!'"):
		stack.append("'holamundus!'")
		string = string[len("'holamundus!'"):]
		Q(string)

	else:
		F(string)

def F(string):
	if stack == ['#'] and string == "":
		print("Successful compilation")
		return 0
	print("Compilation failed : following strings could't be parsed\n", stack)
	return 1
	



